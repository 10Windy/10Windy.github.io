<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Leetcode on VSCode</title>
      <link href="/2022/01/16/leetcode-on-vscode/"/>
      <url>/2022/01/16/leetcode-on-vscode/</url>
      
        <content type="html"><![CDATA[<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>打开<strong>vscode扩展</strong>(或<strong>Ctrl+Shift+X</strong>)</p><p><img src="/2022/01/16/leetcode-on-vscode/image-20220117005021281.png"></p><p>搜索<strong>leetcode</strong>并安装第一个<strong>官方版本</strong></p><p><img src="/2022/01/16/leetcode-on-vscode/image-20220117005202453.png"></p><p>安装完后，<strong>关闭vscode</strong></p><h2 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h2><p>去官网下载对应版本即可</p><p><a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a></p><p>推荐<strong>长期维护版</strong>，<strong>msi</strong>后缀的文件</p><p>下载后，全部<strong>默认</strong>选项安装即可</p><p>安装完成后打开<strong>命令提示符</strong>输入：node –version</p><p>若显示版本号则安装成功</p><p><img src="/2022/01/16/leetcode-on-vscode/image-20220117005827916.png"></p><h2 id="登录LeetCode"><a href="#登录LeetCode" class="headerlink" title="登录LeetCode"></a>登录LeetCode</h2><p>打开vscode，单击LeetCode模块</p><p><img src="/2022/01/16/leetcode-on-vscode/image-20220117005410110.png"></p><p>单击<strong>地球</strong>选择版本，选择<strong>中国版</strong></p><p><img src="/2022/01/16/leetcode-on-vscode/image-20220117010013193.png"></p><p>单击<strong>Sign in to LeetCode</strong></p><p>选择<strong>Cookie</strong>方式登录（因为各种原因，其他方式都登不上）</p><p><img src="/2022/01/16/leetcode-on-vscode/image-20220117010226148.png"></p><p>输入用户名或者<strong>邮箱</strong>（输入账号绑定的邮箱）</p><p><img src="/2022/01/16/leetcode-on-vscode/image-20220117010356065.png"></p><h3 id="获取cookie："><a href="#获取cookie：" class="headerlink" title="获取cookie："></a>获取cookie：</h3><p>首先打开LeetCode官网 <a href="https://leetcode-cn.com/">https://leetcode-cn.com/</a></p><p>在网页版登录</p><p>然后按<strong>F12</strong>或者鼠标<strong>右键</strong>网页空白处单击<strong>检查</strong></p><p><img src="/2022/01/16/leetcode-on-vscode/image-20220117010718306.png"></p><p>单击<strong>Network</strong></p><p><img src="/2022/01/16/leetcode-on-vscode/image-20220117010755672.png"></p><p>单击LeetCode官网里的<strong>题库</strong>链接</p><p><img src="/2022/01/16/leetcode-on-vscode/image-20220117011338053.png"></p><p>这时候<strong>Network</strong>窗口里会出现很多数据，找到<strong>all</strong>，单击</p><p><img src="/2022/01/16/leetcode-on-vscode/image-20220117010916856.png"></p><p>能在该项下找到<strong>cookie</strong>，复制<strong>cookie</strong>（冒号后的所有内容）</p><p><img src="/2022/01/16/leetcode-on-vscode/image-20220117011036005.png"></p><p>把复制好的<strong>cookie</strong>输入到对话框内，回车确认</p><p><img src="/2022/01/16/leetcode-on-vscode/image-20220117010441721.png"></p><p>显示如下界面，则表示<strong>登录成功</strong></p><p><img src="/2022/01/16/leetcode-on-vscode/image-20220117011140759.png"></p><h2 id="刷题"><a href="#刷题" class="headerlink" title="刷题"></a>刷题</h2><p>可以根据问题的<strong>顺序</strong>、<strong>难易程度</strong>、<strong>标签</strong>、<strong>公司</strong>等信息刷题</p><p><img src="/2022/01/16/leetcode-on-vscode/image-20220117011716900.png"></p><p>以这道题为例，单击code now</p><p><img src="/2022/01/16/leetcode-on-vscode/image-20220117011826347.png"></p><p>我选择在新窗口打开，如果是第一次打开，vscode会自动在电脑的用户目录创建一个.leetcode文件夹，专门存放leetcode的文件</p><p><img src="/2022/01/16/leetcode-on-vscode/image-20220117011943867.png"></p><p>打开文件后，code，结束可以<strong>test</strong>测试一下基础样例是否正确，也可以直接<strong>submit</strong>进行提交</p><p><img src="/2022/01/16/leetcode-on-vscode/image-20220117012251706.png"></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> leetcode </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anaconda+tensorflow2.0-gpu+pycharm安装</title>
      <link href="/2022/01/05/anaconda-tensorflow2.0-gpu-pycharm-an-zhuang/"/>
      <url>/2022/01/05/anaconda-tensorflow2.0-gpu-pycharm-an-zhuang/</url>
      
        <content type="html"><![CDATA[<p>按照如下顺序安装</p><h2 id="安装CUDA"><a href="#安装CUDA" class="headerlink" title="安装CUDA"></a>安装CUDA</h2><p>查看自己NVIDIA控制面板cuda的版本，安装对应的即可。</p><p>NVIDIA控制面板→左下角系统信息→组件→NVCUDA64.DLL的版本，我的是11.3。</p><p>从NVIDIA官网下载，一路默认安装即可。</p><p><strong>CUDA下载链接：</strong></p><p><a href="https://developer.nvidia.com/cuda-toolkit-archive">https://developer.nvidia.com/cuda-toolkit-archive</a></p><h2 id="下载cuDNN"><a href="#下载cuDNN" class="headerlink" title="下载cuDNN"></a>下载cuDNN</h2><p>根据tensorflow官方提供的<strong>版本关系</strong>：</p><p><a href="https://tensorflow.google.cn/install/source_windows#gpu">https://tensorflow.google.cn/install/source_windows#gpu</a></p><p>下载对应版本的cuDNN，例如我的CUDA安装的是11.2，则下载8.1版本的cuDNN。</p><p><strong>cuDNN下载链接：</strong></p><p><a href="https://developer.nvidia.com/rdp/cudnn-archive">https://developer.nvidia.com/rdp/cudnn-archive</a></p><p>解压缩，所有文件放到</p><pre class="line-numbers language-none"><code class="language-none">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.0\<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>替换覆盖</p><h2 id="安装anaconda"><a href="#安装anaconda" class="headerlink" title="安装anaconda"></a>安装anaconda</h2><p>安装anaconda，默认配置（有两个框框可以勾选，全选），一路确定就行。</p><h2 id="创建TensorFlow环境"><a href="#创建TensorFlow环境" class="headerlink" title="创建TensorFlow环境"></a>创建TensorFlow环境</h2><p>在开始菜单找到anaconda prompt</p><p>输入</p><pre class="line-numbers language-none"><code class="language-none">conda create -n tensorflow python&#x3D;3.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>python3.6以下pycharm不支持了</p><p>查看所有存在的环境</p><pre class="line-numbers language-none"><code class="language-none">conda info -e<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除某个name的环境</p><pre class="line-numbers language-none"><code class="language-none">conda remove -n name --all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入tensorflow环境</p><pre class="line-numbers language-none"><code class="language-none">activate tensorflow<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装tensorflow-gpu2-0"><a href="#安装tensorflow-gpu2-0" class="headerlink" title="安装tensorflow-gpu2.0"></a>安装tensorflow-gpu2.0</h2><p>版本对应cuda见网址：</p><p><a href="https://tensorflow.google.cn/install/source_windows#gpu">https://tensorflow.google.cn/install/source_windows#gpu</a></p><p>用pip安装，我的cuda是11.2版本，所以装2.6.0版本的tensorflow-gpu</p><pre class="line-numbers language-none"><code class="language-none">pip install tensorflow-gpu&#x3D;&#x3D;2.6.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>打开anaconda prompt</p><p>进入tensorflow环境</p><pre class="line-numbers language-none"><code class="language-none">activate tensorflow<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入python，进入python环境</p><p>输入</p><pre class="line-numbers language-none"><code class="language-none">import tensorflow as tf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果没有报错，则说明配置成功</p><h2 id="配置pycharm"><a href="#配置pycharm" class="headerlink" title="配置pycharm"></a>配置pycharm</h2><p>下载安装pycharm社区版，也是全部默认</p><p>打开pycharm，会让你创建一个新项目，选择编译器选择存在的编译器，</p><p>编译器位置为刚刚创建的环境tensorflow所在位置，选中文件夹里的python即可。</p><p>如果忘了tensorflow位置在哪，可以打开anaconda prompt输入</p><pre class="line-numbers language-none"><code class="language-none">conda info -e<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以查看环境所在地址</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
            <tag> anaconda </tag>
            
            <tag> pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中vector容器的用法</title>
      <link href="/2021/12/28/c-zhong-vector-rong-qi-de-yong-fa/"/>
      <url>/2021/12/28/c-zhong-vector-rong-qi-de-yong-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h1><p>vector是C++STL中的一个重要成员，使用它需包含头文件：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="一、vector初始化"><a href="#一、vector初始化" class="headerlink" title="一、vector初始化"></a>一、vector初始化</h2><p>举例说明：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> list1<span class="token punctuation">;</span><span class="token comment">//默认初始化，此时list1为空，size为0，表明容器中没有元素。这种初始化适合用于元素个数未知，动态添加时使用。</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">list2</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>或者vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> list2 <span class="token operator">=</span> list<span class="token punctuation">;</span><span class="token comment">//拷贝初始化，list必须和list2类型相同，list2将具有和list相同的容量和元素</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> list3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// list3初始化为列表中的元素拷贝</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">list4</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span>list<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//list4初始化为两个迭代器范围中元素的拷贝</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">list5</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化list5为7个元素，每个元素赋值为缺省值，如int即为0</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">list6</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//指定值初始化，list6被初始化为7个值为3的int</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、vector对象的几个操作"><a href="#二、vector对象的几个操作" class="headerlink" title="二、vector对象的几个操作"></a>二、vector对象的几个操作</h2><p>TODO</p><h2 id="三、遍历vector的几种方法"><a href="#三、遍历vector的几种方法" class="headerlink" title="三、遍历vector的几种方法"></a>三、遍历vector的几种方法</h2><p>TODO</p><h3 id="erase-用法"><a href="#erase-用法" class="headerlink" title="erase()用法"></a>erase()用法</h3><p>从vector中删除一个元素，或者删除一个范围内的元素</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>A<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>A<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除迭代器it指向的元素</span>A<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>A<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除（起始位置，起始位置+1）的元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong></p><p>执行完erase操作后，迭代器自动指向删除元素的下一元素。</p><p>如上例，erase后，迭代器it指向元素2位置。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo基本操作</title>
      <link href="/2021/12/23/hexo-ji-ben-cao-zuo/"/>
      <url>/2021/12/23/hexo-ji-ben-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h1><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><p>使用命令来创建文章</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>layout是文章布局，默认为post，可以先不写。</p><p>title是文章的标题，也是文件的名字，存储在source/_posts下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"如何创建一篇文章"</span>INFO  Validating configINFO  Created: D:<span class="token punctuation">\</span>BLOG<span class="token punctuation">\</span>myblog<span class="token punctuation">\</span>source<span class="token punctuation">\</span>_posts<span class="token punctuation">\</span>如何创建一篇文章.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="删除文章"><a href="#删除文章" class="headerlink" title="删除文章"></a>删除文章</h2><p>到 source/_posts下删除相应文章，然后重新生成部署即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>.到目录souce/_posts下删除相应文章<span class="token number">2</span>.<span class="token variable">$hexo</span> clean<span class="token number">3</span>.<span class="token variable">$hexo</span> g<span class="token number">4</span>.<span class="token variable">$hexo</span> d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="草稿箱"><a href="#草稿箱" class="headerlink" title="草稿箱"></a>草稿箱</h2><p>上面新建出来叫做post page。除了post page，我们还可以新建draft page，也就是草稿。很多时候，我们需要先写成草稿，而暂时不发布出去。我们的网站上是看不到草稿文件的。</p><h3 id="创建草稿"><a href="#创建草稿" class="headerlink" title="创建草稿"></a>创建草稿</h3><p>在git bash输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new draft <span class="token string">"test"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们会在source下看到一个新文件夹_drafts，这里面会装着我们所有的草稿文件。执行完命令后,_drafts里会生成一个test.md的文件。</p><h3 id="预览草稿"><a href="#预览草稿" class="headerlink" title="预览草稿"></a>预览草稿</h3><p>写好了的草稿，如何在不发布的情况下，预览一下文章在网站上的样子？</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo server --draft<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="发布草稿"><a href="#发布草稿" class="headerlink" title="发布草稿"></a>发布草稿</h3><p>当你准备好了要发布草稿的时候：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo publish <span class="token string">"test"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你会发现_drafts里的test.md不见了，跑到了_posts里面，也就是说明草稿发布成功了。</p><h2 id="Markdown编辑"><a href="#Markdown编辑" class="headerlink" title="Markdown编辑"></a>Markdown编辑</h2><p>给文章分类加标签</p><pre class="line-numbers language-none"><code class="language-none">tags: [标签1，标签2，标签3]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p>在md文件中插入图片的语法为</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">![]()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中<strong>方括号</strong>为图片描述，<strong>圆括号</strong>为图片路径。</p><p>一般情况下，图片有三种路径，分别是<strong>相对路径</strong>、<strong>绝对路径</strong>和<strong>网络路径</strong>。</p><p><strong>绝对路径</strong>是计算机中的绝对位置，<strong>相对路径</strong>是相对于当前文件的路径。</p><p>由于博客要部署在网站上，部署后会生成新的文件目录，所以应当使用相对路径而不是绝对路径。</p><p>首先在**.config.yaml**文件中更改配置：</p><p>post_asset_folder: true</p><p>当改配置被应用后，使用hexo new 命令创建新文章时，会生成相同名字的文件夹，也就是文章的<strong>资源文件夹</strong>。</p><p>使用命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-renderer-marked<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装插件，并在.config.yaml中更改配置如下</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">marked</span><span class="token punctuation">:</span>  <span class="token key atrule">prependRoot</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">postAsset</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>之后就可以在md中方便的插入图片了。</p><h3 id="hexo与Typora完美结合"><a href="#hexo与Typora完美结合" class="headerlink" title="hexo与Typora完美结合"></a>hexo与Typora完美结合</h3><p>上述是从文章资源文件夹中引用图片，前提是将图片先放到资源文件夹，如果图片众多，十分影响效率。</p><p>首先打开Typora-&gt;文件-&gt;偏好设置-&gt;图像</p><p>调成如图所示的设置：</p><p><img src="/2021/12/23/hexo-ji-ben-cao-zuo/image-20220117024035443.png"></p><p>使用该配置后，可以直接复制网页中的图片地址，粘贴到Typora后，会自动复制该图片到资源文件夹，同时自动更改路径。</p><p>同理，上传本地路径的图片也会自动的复制一份副本到资源文件夹，并自动更改路径。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>需要在自动生成的路径前加入”./“，才能在网页部署时正常显示，如：</p><p>自动生成路径： 资源文件夹/123.jpg </p><p>需更改为：./资源文件夹/123.jpg</p>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
